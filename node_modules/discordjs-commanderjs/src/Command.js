class Command {

    constructor (options) {

        this.name = options.name;
        if (options.aliases !== undefined) this.aliases = options.aliases;
        if (options.description !== undefined) this.description = options.description;
        if (options.group !== undefined) this.group = options.group;
        if (options.hidden !== undefined) this.hidden = options.hidden;
        if (options.examples !== undefined) this.examples = options.examples;
        if (options.clientPermissions !== undefined) this.clientPermissions = options.clientPermissions;
        if (options.userPermissions !== undefined) this.userPermissions = options.userPermissions;
        if (options.throttling !== undefined) this.throttling = options.throttling;
        if (options.guildOnly !== undefined) this.guildOnly = options.guildOnly;

        if (options.ownerOnly === undefined) options.ownerOnly = {};
        if (options.ownerOnly.guild !== undefined || options.ownerOnly.bot !== undefined) this.ownerOnly = {};
        if (options.ownerOnly.guild !== undefined) this.ownerOnly.guild = options.ownerOnly.guild;
        if (options.ownerOnly.bot !== undefined) this.ownerOnly.bot = options.ownerOnly.bot;
        if (options.unknown !== undefined) this.unknown = options.unknown;
        if (options.commandHelp !== undefined) this.commandHelp = options.commandHelp;

        this.throttles = new Map();
    }

    match(command) {

        if (command === this.name) return true;

        if (this.aliases !== undefined) {
            for (let i = 0; i <= this.aliases.length - 1; i++) {
                if (command === this.aliases[i]) return true;
            }
        }

    }

    hasPermissions (client, message) {
        if (!this.clientPermissions && !this.userPermissions) return true;
        if (message.channel.type !== 'text') return true;

        if (this.clientPermissions) {
            let bot = message.guild.members.get(client.user.id);
            if (!bot.hasPermission(this.clientPermissions)) {
                this.onError({code: 1, message: 'Client missing permissions'}, message);
                return false;
            }
        }

        if (this.userPermissions) {
            let member = message.member;
            if (!member.hasPermission(this.userPermissions)) {
                this.onError({code: 2, message: 'Member\'s missing permissions'}, message);
                return false;
            }
        }

        return true;
    }

    throttle (message) {
        if (!this.throttling) return true;

        let userID = message.author.id;
        let throttle = this.throttles.get(userID);

        if (!throttle) {
            this.throttles.set(userID, {
                usages: 1,
                timeout: setTimeout(() => {
                    this.throttles.delete(userID);
                }, this.throttling.duration * 1000)
            });
            return true;
        }

        if (throttle.usages >= this.throttling.usages) {
            this.onError({code: 3, message: 'Limit of use of the order reached'}, message);
            return false;
        }

        throttle.usages += 1;
        this.throttles.set(userID, throttle);
        return true;
    }

    run (message, args, option) {
        throw(`${this.name} doesn't have a run() method.`);
    }

    onError (err, message) {
        throw(`${this.name} doesn't have a onError() method.`);
    }

}

module.exports = Command;